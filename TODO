# Note: This is an Emacs -*-Org-*- file.  If you load it up in the
#       Emacs text editor it will give you a series of organizational
#       features.  To publish the HTML file from Emacs, type 
#       Ctrl-C Ctrl-E h

Masumi TODO List

* Stories
  Here is the pending functionality for Masumi.  This is the order I
  intend to takle the work.  If you would like anything done sooner,
  please contact me.  Once I've started work on one story, I won't
  change stories until it is done, though.

** TODO Zoom display
    The user can zoom the display such that the characters on the screen
    look bigger.  This is important for people unused to kanji so that
    they can increase the font size to be able to see the characters
    clearly, and then decrease the zoom to be able to read comfortably.
    The sentence should re-wrap so that horizontal scrolling is not 
    necessary.  The character in the upper left hand corner should be the
    same character while zooming in and zooming out.
    On the Desktop:
      I don't know what the UI should look like!!!  FIX ME!!!
    On Android:
      Use the zoom gesture to zoom in and out.
 
** TODO Open a window to inspect characters
   Create a mode where a user can get a closer look at a character.
   The user can open an information window.  Then when the mouse
   cursor (or user's finger on Android) is over a character display
   a large version of that character in the information window.
   On the Desktop:
     The user clicks the mouse button to open the window.  After that,
     when the mouse hovers over a new character, it is displayed in the
     window.  If the user clicks again, the window is closed.
   On Android:
     The user presses and holds to open the window.  After that,
     when the finger is over a new character, it is displayed in the window.
     If the user removes their finger from the display, the window is
     closed.

** TODO Display Readings and Radical information in the information window
   When the user is inspecting a character, show the readings and radical
   information for that character.

** TODO Dictionary Lookup Mode
   Introduce a new mode for the information window.  If the user does
   something (to be determined), the information switches between showing
   the character and readings, to doing a lookup  in a dictionary for
   the word under the mouse, finger.  This works excactly the same as
   it does in JLDrill (need to type the details into this story).
   Note that this does NOT include deinflection of verbs/adjectives!
   If the word is found, the reading, canonical writing form and
   English definitions are given in the information window.  If no word
   is found, the character will be displayed as if in character lookup
   mode.

** TODO Deinflection of Verbs/adjectives in Dictionary Loop up
   Deinflect verbs for look up just like in JLDrill.  Display the grammar
   rule that was used in the deinflection.

** TODO Allow user to choose readings for characters
   When the information window is open, allow the user to choose
   specifically which reading to display for the character (not sure
   how the UI should work, especially on Android).  Next time the
   user displays the information for the character, display only that
   reading.  Make it obvious that the user has chosen this reading
   and allow them to cancel the choice later.

** TODO Allow user to choose definitions for words
   Allow the user to choose which definition from the word look up
   to display when showing it in the information window.  Next time
   the user displays the information for the word, display only
   that definition.  Make it obvious that the user has chosen this
   definition and allow them to cancel the choice later.

** TODO Allow the user to enter an English meaning for the Japanese entry
   UI completely unknown :-)  Allow the user to enter an English meaning
   for the Japanese entry that they have now.

** TODO Save As/Load the entry
   Allow the user to save a single entry to a file.  The file format will
   be compatible with the Tanaka corpus if at all possible.  The user
   is prompted to enter a filename when first saving. The user can load
   the file back.

** TODO Autosave
   Autosave the file whenever anything is changed.  I'm not so fond of
   this, but I think it is necessary for Android.  I may change this
   story.

** TODO Display Stroke Order
   Display the stroke order for a character in the information window.
   Probably just by using a custom font (although this may actually be
   quite difficult, so I may change my mind...)

** TODO Allow installation on older Mac OSX versions [0/2]
   JavaApplicationStub is part of the Mac Java installation, but
   it needs to be copied or linked to the application package.
   At the moment I have packaged a copy of it in the installation,
   but this means that if the user has an older (or newer... although
   this will never happen because Apple is discontinuing distributing
   Java) version of the OS, it will fail to run.  Thus the app
   currently only runs on the current version of Mac OSX.  If we
   create an installer for the package, we can create a symbolic
   link from the Java installation (luckily in only one place) to
   the application at install time.
   - [ ] Find a package installer
   - [ ] In the post install link JavaApplicationInstall from the user's
         Java installation into the app.

** TODO JLDrill drill functionality.
   Actually, I need to write a lot of stories, but this is a place holder
   just so everybody knows what I'm planning.

** TODO Create packaging for WebStart [0/2]
   Webstart is a way to distribute applications for any Java platform
   using the web.  The person simply clicks a link on a web page and
   the application is installed.
   - [ ] Create a webstart application
   - [ ] Create a minimal web page that installs Masumi.

** TODO Allow the user to view Chinese information for characters
   The data in the kanji characters also contain pinyin.  Create an
   option to allow the user to view that information instead of
   the Japanese information.


* Completed Stories for Version 0.1.0
  As stories are completed, they will be moved to this section.  When
  there is enough functionality to merit a release, then a release
  will be built.

** DONE Create packaging for Windows [5/5]
   - [X] Wrap the Java jar file as a Windows executable and give it
     an icon.
   - [X] Make Masumi run from the start menu.
   - [X] Make Masumi run from an icon on the desktop.
   - [X] Create a uninstaller for Masumi.
   - [X] Create a minimal web page that shows how to install Masumi.

** DONE Create packaging for Debian/Ubuntu [4/4]
   - [X] Set a version number on each build.
   - [X] Make a debian package that contains the jar file
		 and a script that runs the jar file.
   - [X] Make Masumi run from the start menu with an icon.
   - [X] Create a minimal web page that shows how to install Masumi.
** DONE Find a better icon for Masumi [3/3]
   Masumi currently uses the icon from JLDrill.  We need a better icon.
   Update: I have done it.  It is still ugly, but it is at least distinct.
   - [X] Masumi is intended to be an assistant to help in the
     immersion of Japanese.  Masumi is also a girl's name.  So it
     might make sense to try to find a chibi anime girl graphic and
     use it as an icon.  The blender file shown on the following
     website might be a good place to start.  Licensing has to be
     sorted out, though.
		 http://blenderartists.org/forum/showthread.php?t=199570&s=1527f2fe71936698f2342ca4dcfee309
	 Note: blenderartists.org seems to be down as of this writing.  I
     have placed the blender file in the main directory.  It is said
     to be Creative Commons licensed, but I don't know the details.
   - [X] Contact author
   - [X] Create copyright and acknowledgements page

** DONE Create an Android version [5/5]
   - [X] Install Android SDK
   - [X] Create version that starts on Android.  It should open
		 a window with nothing on it.  The user should be able
		 to navigate away from the window.  Android should be able
		 to suspend or close the app any time it wants.  There is
		 no exit option.
   - [X] Create Ant build process.
   - [X] Create tests that can be run on Android including from Ant.
   - [X] Document SDK installation instructions.

** DONE Create packaging for Android [3/3]
   - [X] Create a package that can be downloaded and installed on
		 Android.
   - [X] Create a signing key for the project and sign the release
         build as part of the build process.  Create a release management
		 process.
   - [X] Create an ant target to copy the Android release package
         into the package directory.

** DONE Create packaging for OSX [5/5]
   - [X] Do this:
		 http://java.sun.com/developer/technicalArticles/JavaLP/JavaToMac3/
   - [X] Create a Jar bundler Ant task
   - [X] Create a Zip task
   - [X] Create a minimal web page that shows how to install Masumi.
   - [X] Copy JavaApplicationStub into app package

** DONE Enter Japanese [3/3]
   The user types Japanese and it is displayed on the screen.
   The text should wrap if it gets to the edge of the screen.
   On the Desktop:
     If it takes up too much vertical space, there should be a vertical
     slider.  If the user deletes text such that it all fits on one
     screen the vertical slider should be removed.
   On Android:
     There is no veritcal slider.  If the user uses up to much vertical
     space, the user can scroll the window as normal.  If the user deletes
     text such that it all fits on on screen then the user can't scroll
     the window any more.
   - [X] Create a context to explore a problem.  For now just stick
         an uneditable label in there.
   - [X] Make the tests in android and swing look the same.  Right now
         the code is quite different even though they do the same thing.
   - [X] Replace the label with an editable field with scrollbars.

** DONE Localize string resources
   While Masumi is initially geared only at learning the Japanese
   language from English, there is a possibility that it might be
   used for other languages.  All hardcoded strings should be
   localizeable into another language using the appropriate
   technology for the platform.

